diff --git a/sdk/android/api/org/webrtc/PeerConnection.java b/sdk/android/api/org/webrtc/PeerConnection.java
index 920e2f12c9..dfb3467ffc 100644
--- a/sdk/android/api/org/webrtc/PeerConnection.java
+++ b/sdk/android/api/org/webrtc/PeerConnection.java
@@ -543,6 +543,14 @@ public class PeerConnection {
      */
     @Nullable public CryptoOptions cryptoOptions;
 
+    /**
+     * Configure if we should include the SDP attribute extmap-allow-mixed in
+     * our offer. Although we currently do support this, it's not included in
+     * our offer by default due to a previous bug that caused the SDP parser to
+     * abort parsing if this attribute was present. This is fixed in Chrome 71.
+     */
+     public boolean offerExtmapAllowMixed;
+
     /**
      * An optional string that if set will be attached to the
      * TURN_ALLOCATE_REQUEST which can be used to correlate client
@@ -591,6 +599,9 @@ public class PeerConnection {
       sdpSemantics = SdpSemantics.PLAN_B;
       activeResetSrtpParams = false;
       cryptoOptions = null;
+      // TODO(webrtc:9985): Change default to true once sufficient time has
+      // passed.
+      offerExtmapAllowMixed = false;
       turnLoggingId = null;
       allowCodecSwitching = null;
     }
@@ -808,6 +819,11 @@ public class PeerConnection {
       return cryptoOptions;
     }
 
+    @CalledByNative("RTCConfiguration")
+    boolean getOfferExtmapAllowMixed() {
+      return offerExtmapAllowMixed;
+    }
+
     @Nullable
     @CalledByNative("RTCConfiguration")
     String getTurnLoggingId() {
diff --git a/sdk/android/src/jni/pc/peer_connection.cc b/sdk/android/src/jni/pc/peer_connection.cc
index 05e940ee80..04d08c919a 100644
--- a/sdk/android/src/jni/pc/peer_connection.cc
+++ b/sdk/android/src/jni/pc/peer_connection.cc
@@ -266,6 +266,8 @@ void JavaToNativeRTCConfiguration(
       Java_RTCConfiguration_getActiveResetSrtpParams(jni, j_rtc_config);
   rtc_config->crypto_options =
       JavaToNativeOptionalCryptoOptions(jni, j_crypto_options);
+  rtc_config->offer_extmap_allow_mixed =
+      Java_RTCConfiguration_getOfferExtmapAllowMixed(jni, j_rtc_config);
 
   rtc_config->allow_codec_switching = JavaToNativeOptionalBool(
       jni, Java_RTCConfiguration_getAllowCodecSwitching(jni, j_rtc_config));
diff --git a/sdk/objc/api/peerconnection/RTCConfiguration.h b/sdk/objc/api/peerconnection/RTCConfiguration.h
index 86eaa6cee5..32ebd6f0e9 100644
--- a/sdk/objc/api/peerconnection/RTCConfiguration.h
+++ b/sdk/objc/api/peerconnection/RTCConfiguration.h
@@ -197,6 +197,13 @@ RTC_OBJC_EXPORT
 
 @property(nonatomic, assign) BOOL allowCodecSwitching;
 
+/** Configure if we should include the SDP attribute extmap-allow-mixed in
+ * our offer. Although we currently do support this, it's not included in
+ * our offer by default due to a previous bug that caused the SDP parser to
+ * abort parsing if this attribute was present. This is fixed in Chrome 71.
+ */
+@property(nonatomic, assign) BOOL offerExtmapAllowMixed;
+
 /**
  * Defines advanced optional cryptographic settings related to SRTP and
  * frame encryption for native WebRTC. Setting this will overwrite any
diff --git a/sdk/objc/api/peerconnection/RTCConfiguration.mm b/sdk/objc/api/peerconnection/RTCConfiguration.mm
index 55abbcdb18..a2f75b05c0 100644
--- a/sdk/objc/api/peerconnection/RTCConfiguration.mm
+++ b/sdk/objc/api/peerconnection/RTCConfiguration.mm
@@ -52,6 +52,7 @@
 @synthesize turnCustomizer = _turnCustomizer;
 @synthesize activeResetSrtpParams = _activeResetSrtpParams;
 @synthesize allowCodecSwitching = _allowCodecSwitching;
+@synthesize offerExtmapAllowMixed = _offerExtmapAllowMixed;
 @synthesize cryptoOptions = _cryptoOptions;
 @synthesize rtcpAudioReportIntervalMs = _rtcpAudioReportIntervalMs;
 @synthesize rtcpVideoReportIntervalMs = _rtcpVideoReportIntervalMs;
@@ -104,6 +105,7 @@
     _iceConnectionReceivingTimeout = config.ice_connection_receiving_timeout;
     _iceBackupCandidatePairPingInterval =
         config.ice_backup_candidate_pair_ping_interval;
+    _offerExtmapAllowMixed = config.offer_extmap_allow_mixed;
     _keyType = RTCEncryptionKeyTypeECDSA;
     _iceCandidatePoolSize = config.ice_candidate_pool_size;
     _shouldPruneTurnPorts = config.prune_turn_ports;
@@ -203,6 +205,7 @@
       _iceConnectionReceivingTimeout;
   nativeConfig->ice_backup_candidate_pair_ping_interval =
       _iceBackupCandidatePairPingInterval;
+  nativeConfig->offer_extmap_allow_mixed = _offerExtmapAllowMixed;
   rtc::KeyType keyType =
       [[self class] nativeEncryptionKeyTypeForKeyType:_keyType];
   if (_certificate != nullptr) {
